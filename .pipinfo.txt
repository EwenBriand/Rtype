/home/clement_t/Rtype/2Rtype/ecs/src/Engine.cpp setupPipeline 64 (-1000) [&]() { SYS.GetInputManager().PollEvents(); for (auto& observer : m_observers) { observer->Poll(); } }
/home/clement_t/Rtype/2Rtype/ecs/src/GraphicalRayLib.cpp ModPipeline 26 (-999) [&]() { if (WindowShouldClose()) { CONSOLE::info << "Window closed" << std::endl; SYS.Exit(); } }
RTYPE CLIENT ROUTINE
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/Collider2D.cpp OnLoad 22 (-600) []() { SYS.ForEach<Collider2D>([](Collider2D& collider) { collider.recalculateEdgesAndNormals(); }); }
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/Collider2D.cpp OnLoad 22 (-600) []() { SYS.ForEach<Collider2D>([](Collider2D& collider) { collider.recalculateEdgesAndNormals(); }); }
/home/clement_t/Rtype/2Rtype/ecs/src/GraphicalRayLib.cpp ModPipeline 33 (-500) [&]() { BeginDrawing(); ClearBackground(DARKGRAY); }
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 20 (-500) [engine]() { if (not engine->PlayMode()) return; SYS.ForEach<RigidBody2D>([](RigidBody2D& r) { r._acceleration = { 0, 0 }; }); }
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 20 (-500) [engine]() { if (not engine->PlayMode()) return; SYS.ForEach<RigidBody2D>([](RigidBody2D& r) { r._acceleration = { 0, 0 }; }); }
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 29 (-499) [engine]() { if (not engine->PlayMode()) return; SYS.ForEach<RigidBody2D>([](RigidBody2D& r) { if (r.SimulateGravity()) r._acceleration.y += 9.81; }); }
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 29 (-499) [engine]() { if (not engine->PlayMode()) return; SYS.ForEach<RigidBody2D>([](RigidBody2D& r) { if (r.SimulateGravity()) r._acceleration.y += 9.81; }); }
/home/clement_t/Rtype/2Rtype/ecs/src/GraphicalRayLib.cpp ModPipeline 39 (-10) [&]() { DisplayBuffer(); }
--- Update() ---
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 39 (100) [engine]() { if (not engine->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody2D>([deltaTime](RigidBody2D& r) { r._velocity.x += r._acceleration.x * deltaTime; r._velocity.y += r._acceleration.y * deltaTime; }); }
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 39 (100) [engine]() { if (not engine->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody2D>([deltaTime](RigidBody2D& r) { r._velocity.x += r._acceleration.x * deltaTime; r._velocity.y += r._acceleration.y * deltaTime; }); }
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 50 (101) [engine]() { if (not engine->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody2D>([deltaTime](RigidBody2D& r) { try { auto& transform = SYS.GetComponent<CoreTransform>(r._entityID); r.OverridePrevPosition({ transform.x, transform.y }); transform.x += r._velocity.x * deltaTime; transform.y += r._velocity.y * deltaTime; } catch (std::exception& e) { } }); }
/home/clement_t/Rtype/2Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 50 (101) [engine]() { if (not engine->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody2D>([deltaTime](RigidBody2D& r) { try { auto& transform = SYS.GetComponent<CoreTransform>(r._entityID); r.OverridePrevPosition({ transform.x, transform.y }); transform.x += r._velocity.x * deltaTime; transform.y += r._velocity.y * deltaTime; } catch (std::exception& e) { } }); }
/home/clement_t/Rtype/2Rtype/ecs/src/UIManager.cpp ModPipeline 118 (499) [&]() { Draw(); }
/home/clement_t/Rtype/2Rtype/ecs/src/GraphicalRayLib.cpp ModPipeline 44 (500) [&]() { EndDrawing(); }
