/home/clement_t/Rtype/3Rtype/ecs/src/Engine.cpp setupPipeline 65 (-1000) [&]() { SYS.GetInputManager().PollEvents(); for (auto& observer : m_observers) { observer->Poll(); } }
/home/clement_t/Rtype/3Rtype/ecs/src/GraphicalRayLib.cpp ModPipeline 26 (-999) [&]() { if (WindowShouldClose()) { CONSOLE::info << "Window closed" << std::endl; SYS.Exit(); } }
RTYPE CLIENT ROUTINE
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/Collider2D.cpp OnLoad 22 (-600) []() { SYS.ForEach<Collider2D>([](Collider2D& collider) { collider.recalculateEdgesAndNormals(); }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/Collider2D.cpp OnLoad 22 (-600) []() { SYS.ForEach<Collider2D>([](Collider2D& collider) { collider.recalculateEdgesAndNormals(); }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 47 (-510) [this]() { if (not ENGINE->PlayMode()) return; SYS.ForEach<RigidBody3D>([](RigidBody3D& r) { r.SetAcceleration({ 0, 0, 0 }); r.SetAngularAcceleration({ 0, 0, 0 }); }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 37 (-510) [this]() { if (not ENGINE->PlayMode()) return; SYS.ForEach<RigidBody3D>([](RigidBody3D& r) { r.SetForces({ 0, 0, 0 }); r.SetTorques({ 0, 0, 0 }); }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 47 (-510) [this]() { if (not ENGINE->PlayMode()) return; SYS.ForEach<RigidBody3D>([](RigidBody3D& r) { r.SetAcceleration({ 0, 0, 0 }); r.SetAngularAcceleration({ 0, 0, 0 }); }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 37 (-510) [this]() { if (not ENGINE->PlayMode()) return; SYS.ForEach<RigidBody3D>([](RigidBody3D& r) { r.SetForces({ 0, 0, 0 }); r.SetTorques({ 0, 0, 0 }); }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 68 (-501) [this]() { if (not ENGINE->PlayMode()) return; SYS.ForEach<RigidBody3D>([](RigidBody3D& r) { r.AddForce(r._velocity * (-r._dragFactor)); r.AddTorque(r._angularVelocity * (-r._dragFactor)); }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 57 (-501) [this]() { if (not ENGINE->PlayMode()) return; SYS.ForEach<RigidBody3D>([](RigidBody3D& r) { if (r.SimulateGravity()) { r.AddForce({ 0, PhysicsFactor * -9.81f, 0 }); } }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 68 (-501) [this]() { if (not ENGINE->PlayMode()) return; SYS.ForEach<RigidBody3D>([](RigidBody3D& r) { r.AddForce(r._velocity * (-r._dragFactor)); r.AddTorque(r._angularVelocity * (-r._dragFactor)); }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 57 (-501) [this]() { if (not ENGINE->PlayMode()) return; SYS.ForEach<RigidBody3D>([](RigidBody3D& r) { if (r.SimulateGravity()) { r.AddForce({ 0, PhysicsFactor * -9.81f, 0 }); } }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 20 (-500) [engine]() { if (not engine->PlayMode()) return; SYS.ForEach<RigidBody2D>([](RigidBody2D& r) { r._acceleration = { 0, 0 }; }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 20 (-500) [engine]() { if (not engine->PlayMode()) return; SYS.ForEach<RigidBody2D>([](RigidBody2D& r) { r._acceleration = { 0, 0 }; }); }
/home/clement_t/Rtype/3Rtype/ecs/src/GraphicalRayLib.cpp ModPipeline 33 (-500) [&]() { BeginDrawing(); ClearBackground(DARKGRAY); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 29 (-499) [engine]() { if (not engine->PlayMode()) return; SYS.ForEach<RigidBody2D>([](RigidBody2D& r) { if (r.SimulateGravity()) r._acceleration.y += 9.81; }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 29 (-499) [engine]() { if (not engine->PlayMode()) return; SYS.ForEach<RigidBody2D>([](RigidBody2D& r) { if (r.SimulateGravity()) r._acceleration.y += 9.81; }); }
/home/clement_t/Rtype/3Rtype/ecs/src/GraphicalRayLib.cpp ModPipeline 39 (-10) [&]() { DisplayBuffer(); }
--- Update() ---
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 39 (100) [engine]() { if (not engine->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody2D>([deltaTime](RigidBody2D& r) { r._velocity.x += r._acceleration.x * deltaTime; r._velocity.y += r._acceleration.y * deltaTime; }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 80 (100) [this]() { if (not ENGINE->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody3D>([deltaTime](RigidBody3D& r) { if (r._mass == 0) return; r._acceleration.x = r._forces.x / (float)r._mass; r._acceleration.y = r._forces.y / (float)r._mass; r._acceleration.z = r._forces.z / (float)r._mass; r._angularAcceleration.x = r._torques.x / (float)r._mass; r._angularAcceleration.y = r._torques.y / (float)r._mass; r._angularAcceleration.z = r._torques.z / (float)r._mass; }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 80 (100) [this]() { if (not ENGINE->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody3D>([deltaTime](RigidBody3D& r) { if (r._mass == 0) return; r._acceleration.x = r._forces.x / (float)r._mass; r._acceleration.y = r._forces.y / (float)r._mass; r._acceleration.z = r._forces.z / (float)r._mass; r._angularAcceleration.x = r._torques.x / (float)r._mass; r._angularAcceleration.y = r._torques.y / (float)r._mass; r._angularAcceleration.z = r._torques.z / (float)r._mass; }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 39 (100) [engine]() { if (not engine->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody2D>([deltaTime](RigidBody2D& r) { r._velocity.x += r._acceleration.x * deltaTime; r._velocity.y += r._acceleration.y * deltaTime; }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 50 (101) [engine]() { if (not engine->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody2D>([deltaTime](RigidBody2D& r) { try { auto& transform = SYS.GetComponent<CoreTransform>(r._entityID); r.OverridePrevPosition({ transform.x, transform.y }); transform.x += r._velocity.x * deltaTime; transform.y += r._velocity.y * deltaTime; } catch (std::exception& e) { } }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 97 (101) [this]() { if (not ENGINE->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody3D>([deltaTime](RigidBody3D& r) { r._velocity.x += r._acceleration.x * deltaTime; r._velocity.y += r._acceleration.y * deltaTime; r._velocity.z += r._acceleration.z * deltaTime; r._angularVelocity.x += r._angularAcceleration.x * deltaTime; r._angularVelocity.y += r._angularAcceleration.y * deltaTime; r._angularVelocity.z += r._angularAcceleration.z * deltaTime; }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 97 (101) [this]() { if (not ENGINE->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody3D>([deltaTime](RigidBody3D& r) { r._velocity.x += r._acceleration.x * deltaTime; r._velocity.y += r._acceleration.y * deltaTime; r._velocity.z += r._acceleration.z * deltaTime; r._angularVelocity.x += r._angularAcceleration.x * deltaTime; r._angularVelocity.y += r._angularAcceleration.y * deltaTime; r._angularVelocity.z += r._angularAcceleration.z * deltaTime; }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody2D.cpp OnLoad 50 (101) [engine]() { if (not engine->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody2D>([deltaTime](RigidBody2D& r) { try { auto& transform = SYS.GetComponent<CoreTransform>(r._entityID); r.OverridePrevPosition({ transform.x, transform.y }); transform.x += r._velocity.x * deltaTime; transform.y += r._velocity.y * deltaTime; } catch (std::exception& e) { } }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 112 (102) [this]() { if (not ENGINE->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody3D>([deltaTime](RigidBody3D& r) { try { auto& transform = SYS.GetComponent<CoreTransform>(r._entityID); r.SetPreviousPosition({ transform.x, transform.y, transform.z }); if (not r._lockX) transform.x += r._velocity.x * deltaTime; if (not r._lockY) transform.y += r._velocity.y * deltaTime; if (not r._lockZ) transform.z += r._velocity.z * deltaTime; transform.x += r._velocity.x * deltaTime; transform.y += r._velocity.y * deltaTime; transform.z += r._velocity.z * deltaTime; if (not r._lockRotX) transform.rotationX += r._angularVelocity.x * deltaTime; if (not r._lockRotY) transform.rotationY += r._angularVelocity.y * deltaTime; if (not r._lockRotZ) transform.rotationZ += r._angularVelocity.z * deltaTime; } catch (std::exception& e) { std::cerr << e.what() << std::endl; } }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 143 (102) [this]() { if (not ENGINE->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody3D>([deltaTime](RigidBody3D& r) { try { auto& transform = SYS.GetComponent<CoreTransform>(r._entityID); r.SetPreviousRotation({ transform.rotationX, transform.rotationY, transform.rotationZ }); if (not r._lockRotX) transform.rotationX += r._angularVelocity.x * deltaTime; if (not r._lockRotY) transform.rotationY += r._angularVelocity.y * deltaTime; if (not r._lockRotZ) transform.rotationZ += r._angularVelocity.z * deltaTime; transform.rotationX += r._angularVelocity.x * deltaTime; transform.rotationY += r._angularVelocity.y * deltaTime; transform.rotationZ += r._angularVelocity.z * deltaTime; } catch (std::exception& e) { std::cerr << e.what() << std::endl; } }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 143 (102) [this]() { if (not ENGINE->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody3D>([deltaTime](RigidBody3D& r) { try { auto& transform = SYS.GetComponent<CoreTransform>(r._entityID); r.SetPreviousRotation({ transform.rotationX, transform.rotationY, transform.rotationZ }); if (not r._lockRotX) transform.rotationX += r._angularVelocity.x * deltaTime; if (not r._lockRotY) transform.rotationY += r._angularVelocity.y * deltaTime; if (not r._lockRotZ) transform.rotationZ += r._angularVelocity.z * deltaTime; transform.rotationX += r._angularVelocity.x * deltaTime; transform.rotationY += r._angularVelocity.y * deltaTime; transform.rotationZ += r._angularVelocity.z * deltaTime; } catch (std::exception& e) { std::cerr << e.what() << std::endl; } }); }
/home/clement_t/Rtype/3Rtype/ecs/include/Components.Vanilla/RigidBody3D.cpp OnLoad 112 (102) [this]() { if (not ENGINE->PlayMode()) return; auto deltaTime = SYS.GetDeltaTime(); SYS.ForEach<RigidBody3D>([deltaTime](RigidBody3D& r) { try { auto& transform = SYS.GetComponent<CoreTransform>(r._entityID); r.SetPreviousPosition({ transform.x, transform.y, transform.z }); if (not r._lockX) transform.x += r._velocity.x * deltaTime; if (not r._lockY) transform.y += r._velocity.y * deltaTime; if (not r._lockZ) transform.z += r._velocity.z * deltaTime; transform.x += r._velocity.x * deltaTime; transform.y += r._velocity.y * deltaTime; transform.z += r._velocity.z * deltaTime; if (not r._lockRotX) transform.rotationX += r._angularVelocity.x * deltaTime; if (not r._lockRotY) transform.rotationY += r._angularVelocity.y * deltaTime; if (not r._lockRotZ) transform.rotationZ += r._angularVelocity.z * deltaTime; } catch (std::exception& e) { std::cerr << e.what() << std::endl; } }); }
/home/clement_t/Rtype/3Rtype/ecs/src/UIManager.cpp ModPipeline 118 (499) [&]() { Draw(); }
/home/clement_t/Rtype/3Rtype/ecs/src/GraphicalRayLib.cpp ModPipeline 44 (500) [&]() { EndDrawing(); }
