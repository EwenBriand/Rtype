.TH "raylib::GraphicalRayLib" 3 "Mon Dec 18 2023" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
raylib::GraphicalRayLib
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBgraph::IGraphicalModule\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::string \fBGetID\fP () const override"
.br
.RI "This functions returns the ID of the graphical module\&. Each implementation should have a unique ID, which will serve to identify the module and prevent compatibility issues\&. "
.ti -1c
.RI "void \fBRun\fP (std::function< void(float deltaT)> &&func) override"
.br
.ti -1c
.RI "void \fBStart\fP () override"
.br
.ti -1c
.RI "void \fBStop\fP () override"
.br
.ti -1c
.RI "void \fBModPipeline\fP () override"
.br
.RI "This function updates the pipeline of the engine to include the graphical module's actions, such as clearing the window and drawing objects\&. "
.ti -1c
.RI "void \fBRegisterEvent\fP (const std::string &eventKey, std::function< void()> &&callback) override"
.br
.RI "This function registers an event which will be tested for every frame\&. If the event is triggered, the callback will be called\&. "
.ti -1c
.RI "void \fBWindowDrawRectangle\fP (\fBgraph::graphRect_t\fP rectInfo) override"
.br
.RI "This function buffers a rectangle to be drawn in the window\&. "
.ti -1c
.RI "void \fBWindowDrawCircle\fP (\fBgraph::graphCircle_t\fP circleInfo) override"
.br
.RI "This function buffers a circle to be drawn in the window\&. "
.ti -1c
.RI "void \fBWindowDrawText\fP (\fBgraph::graphText_t\fP textInfo) override"
.br
.RI "This function buffers a text to be drawn in the window\&. "
.ti -1c
.RI "\fBgraph::vec2f\fP \fBWindowGetMousePos\fP () const override"
.br
.RI "This function returns a vector2f containing the mouse position on the screen\&. "
.ti -1c
.RI "bool \fBWindowIsMouseRightPressed\fP () const override"
.br
.RI "This function returns true if the mouse right button has been pressed during the current frame\&. "
.ti -1c
.RI "bool \fBWindowIsMouseLeftPressed\fP () const override"
.br
.RI "This function returns true if the mouse left button has been pressed during the current frame\&. "
.ti -1c
.RI "bool \fBWindowIsMouseRightDown\fP () const override"
.br
.RI "This function returns true if the mouse right button is actively being pressed down\&. "
.ti -1c
.RI "bool \fBWindowIsMouseLeftDown\fP () const override"
.br
.RI "This function returns true if the mouse left button is actively being pressed down\&. "
.ti -1c
.RI "int \fBWindowGetMouseWheelDelta\fP () const override"
.br
.RI "Returns an integer representing the mouse wheel delta, that is by how much the mouse wheel has been scrolled\&. "
.ti -1c
.RI "int \fBGetNextCharPressed\fP () override"
.br
.RI "Generator that returns the next char in the list of the characters that have been pressed during the current frame\&. "
.ti -1c
.RI "bool \fBisKeyPressed\fP (int key) override"
.br
.RI "Returns true if the specified key is actively being pressed down\&. "
.in -1c
.in +1c
.ti -1c
.RI "virtual std::string \fBGetID\fP () const =0"
.br
.RI "This functions returns the ID of the graphical module\&. Each implementation should have a unique ID, which will serve to identify the module and prevent compatibility issues\&. "
.ti -1c
.RI "virtual void \fBRun\fP (std::function< void(float deltaT)> &&callback)=0"
.br
.ti -1c
.RI "virtual void \fBStart\fP ()=0"
.br
.ti -1c
.RI "virtual void \fBStop\fP ()=0"
.br
.ti -1c
.RI "virtual void \fBModPipeline\fP ()=0"
.br
.RI "This function updates the pipeline of the engine to include the graphical module's actions, such as clearing the window and drawing objects\&. "
.ti -1c
.RI "virtual void \fBRegisterEvent\fP (const std::string &eventKey, std::function< void()> &&callback)=0"
.br
.RI "This function registers an event which will be tested for every frame\&. If the event is triggered, the callback will be called\&. "
.ti -1c
.RI "virtual void \fBWindowDrawRectangle\fP (\fBgraphRect_t\fP rectInfo)=0"
.br
.RI "This function buffers a rectangle to be drawn in the window\&. "
.ti -1c
.RI "virtual void \fBWindowDrawCircle\fP (\fBgraphCircle_t\fP circleInfo)=0"
.br
.RI "This function buffers a circle to be drawn in the window\&. "
.ti -1c
.RI "virtual void \fBWindowDrawText\fP (\fBgraphText_t\fP textInfo)=0"
.br
.RI "This function buffers a text to be drawn in the window\&. "
.ti -1c
.RI "virtual \fBvec2f\fP \fBWindowGetMousePos\fP () const =0"
.br
.RI "This function returns a vector2f containing the mouse position on the screen\&. "
.ti -1c
.RI "virtual bool \fBWindowIsMouseRightPressed\fP () const =0"
.br
.RI "This function returns true if the mouse right button has been pressed during the current frame\&. "
.ti -1c
.RI "virtual bool \fBWindowIsMouseLeftPressed\fP () const =0"
.br
.RI "This function returns true if the mouse left button has been pressed during the current frame\&. "
.ti -1c
.RI "virtual bool \fBWindowIsMouseRightDown\fP () const =0"
.br
.RI "This function returns true if the mouse right button is actively being pressed down\&. "
.ti -1c
.RI "virtual bool \fBWindowIsMouseLeftDown\fP () const =0"
.br
.RI "This function returns true if the mouse left button is actively being pressed down\&. "
.ti -1c
.RI "virtual int \fBWindowGetMouseWheelDelta\fP () const =0"
.br
.RI "Returns an integer representing the mouse wheel delta, that is by how much the mouse wheel has been scrolled\&. "
.ti -1c
.RI "virtual int \fBGetNextCharPressed\fP ()=0"
.br
.RI "Generator that returns the next char in the list of the characters that have been pressed during the current frame\&. "
.ti -1c
.RI "virtual bool \fBisKeyPressed\fP (int key)=0"
.br
.RI "Returns true if the specified key is actively being pressed down\&. "
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "std::string raylib::GraphicalRayLib::GetID () const\fC [override]\fP, \fC [virtual]\fP"

.PP
This functions returns the ID of the graphical module\&. Each implementation should have a unique ID, which will serve to identify the module and prevent compatibility issues\&. 
.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "int raylib::GraphicalRayLib::GetNextCharPressed ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Generator that returns the next char in the list of the characters that have been pressed during the current frame\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "bool raylib::GraphicalRayLib::isKeyPressed (int key)\fC [override]\fP, \fC [virtual]\fP"

.PP
Returns true if the specified key is actively being pressed down\&. 
.PP
\fBParameters\fP
.RS 4
\fIkey\fP 
.RE
.PP
\fBReturns\fP
.RS 4
true 
.PP
false 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "void raylib::GraphicalRayLib::ModPipeline ()\fC [override]\fP, \fC [virtual]\fP"

.PP
This function updates the pipeline of the engine to include the graphical module's actions, such as clearing the window and drawing objects\&. 
.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "void raylib::GraphicalRayLib::RegisterEvent (const std::string & eventKey, std::function< void()> && callback)\fC [override]\fP, \fC [virtual]\fP"

.PP
This function registers an event which will be tested for every frame\&. If the event is triggered, the callback will be called\&. 
.PP
\fBWarning\fP
.RS 4
if implementing a new graphical module, do not forget to test for events in the pipeline!
.RE
.PP
\fBParameters\fP
.RS 4
\fIeventKey\fP 
.br
\fIcallback\fP 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "void raylib::GraphicalRayLib::Run (std::function< void(float deltaT)> && func)\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "void raylib::GraphicalRayLib::Start ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "void raylib::GraphicalRayLib::Stop ()\fC [override]\fP, \fC [virtual]\fP"

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "void raylib::GraphicalRayLib::WindowDrawCircle (\fBgraph::graphCircle_t\fP circleInfo)\fC [override]\fP, \fC [virtual]\fP"

.PP
This function buffers a circle to be drawn in the window\&. 
.PP
\fBParameters\fP
.RS 4
\fIcircleInfo\fP 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "void raylib::GraphicalRayLib::WindowDrawRectangle (\fBgraph::graphRect_t\fP rectInfo)\fC [override]\fP, \fC [virtual]\fP"

.PP
This function buffers a rectangle to be drawn in the window\&. 
.PP
\fBParameters\fP
.RS 4
\fIrectInfo\fP 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "void raylib::GraphicalRayLib::WindowDrawText (\fBgraph::graphText_t\fP textInfo)\fC [override]\fP, \fC [virtual]\fP"

.PP
This function buffers a text to be drawn in the window\&. 
.PP
\fBParameters\fP
.RS 4
\fItextInfo\fP 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "\fBgraph::vec2f\fP raylib::GraphicalRayLib::WindowGetMousePos () const\fC [override]\fP, \fC [virtual]\fP"

.PP
This function returns a vector2f containing the mouse position on the screen\&. 
.PP
\fBReturns\fP
.RS 4
vec2f 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "int raylib::GraphicalRayLib::WindowGetMouseWheelDelta () const\fC [override]\fP, \fC [virtual]\fP"

.PP
Returns an integer representing the mouse wheel delta, that is by how much the mouse wheel has been scrolled\&. 
.PP
\fBReturns\fP
.RS 4
int 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "bool raylib::GraphicalRayLib::WindowIsMouseLeftDown () const\fC [override]\fP, \fC [virtual]\fP"

.PP
This function returns true if the mouse left button is actively being pressed down\&. 
.PP
\fBReturns\fP
.RS 4
true 
.PP
false 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "bool raylib::GraphicalRayLib::WindowIsMouseLeftPressed () const\fC [override]\fP, \fC [virtual]\fP"

.PP
This function returns true if the mouse left button has been pressed during the current frame\&. 
.PP
\fBReturns\fP
.RS 4
true 
.PP
false 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "bool raylib::GraphicalRayLib::WindowIsMouseRightDown () const\fC [override]\fP, \fC [virtual]\fP"

.PP
This function returns true if the mouse right button is actively being pressed down\&. 
.PP
\fBReturns\fP
.RS 4
true 
.PP
false 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.
.SS "bool raylib::GraphicalRayLib::WindowIsMouseRightPressed () const\fC [override]\fP, \fC [virtual]\fP"

.PP
This function returns true if the mouse right button has been pressed during the current frame\&. 
.PP
\fBReturns\fP
.RS 4
true 
.PP
false 
.RE
.PP

.PP
Implements \fBgraph::IGraphicalModule\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
