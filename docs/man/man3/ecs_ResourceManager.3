.TH "ecs::ResourceManager" 3 "Mon Dec 18 2023" "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ecs::ResourceManager
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "std::shared_ptr< \fBAUserComponent\fP > \fBLoadUserComponent\fP (const std::string &resourceID)"
.br
.RI "Returns an instance of the \fBAUserComponent\fP child class contained in the shared library with the name given in parameter\&. The library should contain a method named create, which will return a pointer to the instance of the class\&. This method can be generated easily using the MANAGED_RESOURCE macro in metadata\&.hpp\&. "
.ti -1c
.RI "void \fBCheckHotReload\fP ()"
.br
.RI "Detect all the user scripts and checks if they have changed by comparing a old checksum of the file with the new one\&. If the checksum is different, the library is recompiled, reloaded, and the \fBECS\fP is reloaded if the compilation was successful\&. "
.ti -1c
.RI "bool \fBCompileUserScript\fP (const std::string &path)"
.br
.RI "Compiles the user script given in parameter, and generate optional metadata for it\&. Returns true if the compilation was successful, false otherwise\&. "
.ti -1c
.RI "std::string \fBGetChecksum\fP (const std::string &path)"
.br
.RI "Returns the checksum of the file given in parameter\&. "
.ti -1c
.RI "bool \fBFileHasChanged\fP (const std::string &path)"
.br
.RI "Returns true if the file has changed\&. Only tests \&.cpp files, and also checks for the corresponding hpp file\&. "
.ti -1c
.RI "void \fBManageUpdate\fP (const std::string &path)"
.br
.RI "Manages the changes in the user scripts\&. "
.ti -1c
.RI "void \fBClear\fP ()"
.br
.RI "Clears all handles\&. Make sure that every reference to an object that originates from a shared library is deleted before calling this function\&. "
.ti -1c
.RI "std::vector< std::string > \fBGetActionList\fP () const"
.br
.RI "Returns the list of the names of all the registered actions\&. An action is a function pointer that can be called, usually declared as a lambda expression\&. "
.ti -1c
.RI "void \fBRegisterPublicAction\fP (const std::string &name, Action action)"
.br
.RI "Registers a new action to render it available to the rest of the code\&. "
.ti -1c
.RI "std::shared_ptr< \fBgraph::IGraphicalModule\fP > \fBLoadGraphicalModule\fP (const std::string &path='')"
.br
.RI "Loads a graphical module from the given file path\&. If the path is empty, the default module ( graphical ray lib ) is loaded\&. "
.ti -1c
.RI "std::string \fBLoadFileText\fP (const std::string &path)"
.br
.RI "Loads a text file from the asset folder and returns its contents as a null terminated string\&. "
.ti -1c
.RI "std::shared_ptr< \fBeng::IGame\fP > \fBLoadGame\fP (const std::string &path)"
.br
.RI "Loads an instance of the IGame interface from the given file path\&. "
.ti -1c
.RI "int \fBLoadPrefab\fP (const std::string &name)"
.br
.RI "Loads a prefab from its name containing the save of an entity, from the ${assetRoot}/prefabs folder\&. It returns a handle to the entity instantiated, or -1 if the instantiation failed\&. "
.ti -1c
.RI "void \fBSavePrefab\fP (const std::string &name, int entity)"
.br
.RI "Saves an entity as a prefab in the ${assetRoot}/prefabs folder\&. "
.ti -1c
.RI "void \fBHotLoadLibrary\fP (const std::string &path)"
.br
.RI "HotLoads the given library\&. (meaning it will try to compile it before loading it) "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static std::string \fBMakePath\fP (const std::vector< std::string > &pathElements, bool throwIfNotExist=false)"
.br
.RI "Returns the path composed of the elements in the vector\&. "
.in -1c
.SH "Member Function Documentation"
.PP 
.SS "void ecs::ResourceManager::CheckHotReload ()"

.PP
Detect all the user scripts and checks if they have changed by comparing a old checksum of the file with the new one\&. If the checksum is different, the library is recompiled, reloaded, and the \fBECS\fP is reloaded if the compilation was successful\&. 
.SS "void ecs::ResourceManager::Clear ()"

.PP
Clears all handles\&. Make sure that every reference to an object that originates from a shared library is deleted before calling this function\&. 
.SS "bool ecs::ResourceManager::CompileUserScript (const std::string & path)"

.PP
Compiles the user script given in parameter, and generate optional metadata for it\&. Returns true if the compilation was successful, false otherwise\&. 
.SS "bool ecs::ResourceManager::FileHasChanged (const std::string & path)"

.PP
Returns true if the file has changed\&. Only tests \&.cpp files, and also checks for the corresponding hpp file\&. 
.SS "std::vector< std::string > ecs::ResourceManager::GetActionList () const"

.PP
Returns the list of the names of all the registered actions\&. An action is a function pointer that can be called, usually declared as a lambda expression\&. 
.PP
\fBReturns\fP
.RS 4
std::vector<std::string> 
.RE
.PP

.SS "std::string ecs::ResourceManager::GetChecksum (const std::string & path)"

.PP
Returns the checksum of the file given in parameter\&. 
.SS "void ecs::ResourceManager::HotLoadLibrary (const std::string & path)"

.PP
HotLoads the given library\&. (meaning it will try to compile it before loading it) 
.PP
\fBParameters\fP
.RS 4
\fIpath\fP : the name of the \&.cpp file containing the code of the library\&. This file should be in the userScriptsPath defined in base\&.cfg\&. 
.RE
.PP

.SS "std::string ecs::ResourceManager::LoadFileText (const std::string & path)"

.PP
Loads a text file from the asset folder and returns its contents as a null terminated string\&. 
.SS "std::shared_ptr< \fBeng::IGame\fP > ecs::ResourceManager::LoadGame (const std::string & path)"

.PP
Loads an instance of the IGame interface from the given file path\&. 
.SS "std::shared_ptr< \fBgraph::IGraphicalModule\fP > ecs::ResourceManager::LoadGraphicalModule (const std::string & path = \fC''\fP)"

.PP
Loads a graphical module from the given file path\&. If the path is empty, the default module ( graphical ray lib ) is loaded\&. 
.SS "int ecs::ResourceManager::LoadPrefab (const std::string & name)"

.PP
Loads a prefab from its name containing the save of an entity, from the ${assetRoot}/prefabs folder\&. It returns a handle to the entity instantiated, or -1 if the instantiation failed\&. 
.SS "std::shared_ptr< \fBAUserComponent\fP > ecs::ResourceManager::LoadUserComponent (const std::string & resourceID)"

.PP
Returns an instance of the \fBAUserComponent\fP child class contained in the shared library with the name given in parameter\&. The library should contain a method named create, which will return a pointer to the instance of the class\&. This method can be generated easily using the MANAGED_RESOURCE macro in metadata\&.hpp\&. 
.PP
\fBParameters\fP
.RS 4
\fIresourceID\fP : the name of the library, minus lib and \&.so\&. For example, if the library is named libTest\&.so, the resourceID is Test, which should also be the name of the class contained in the library\&. 
.RE
.PP
\fBReturns\fP
.RS 4
AUserComponent* 
.RE
.PP

.SS "std::string ecs::ResourceManager::MakePath (const std::vector< std::string > & pathElements, bool throwIfNotExist = \fCfalse\fP)\fC [static]\fP"

.PP
Returns the path composed of the elements in the vector\&. 
.SS "void ecs::ResourceManager::ManageUpdate (const std::string & path)"

.PP
Manages the changes in the user scripts\&. 
.SS "void ecs::ResourceManager::RegisterPublicAction (const std::string & name, Action action)"

.PP
Registers a new action to render it available to the rest of the code\&. 
.SS "void ecs::ResourceManager::SavePrefab (const std::string & name, int entity)"

.PP
Saves an entity as a prefab in the ${assetRoot}/prefabs folder\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
