#!/usr/bin/python3

import sys
import os
import subprocess
import datetime

def print_color(color, text, end = "\n"):
    colors = {
        "red" : "\033[91m",
        "green" : "\033[92m",
        "yellow" : "\033[93m",
        "blue" : "\033[94m",
        "purple" : "\033[95m",
        "cyan" : "\033[96m",
        "white" : "\033[97m",
    }
    print(colors[color] + text + "\033[0m", end = end)

def chain_commands(cmds):
    cmd = ""
    for c in cmds:
        cmd += c
        if c != cmds[-1]:
            cmd += " && "
    return cmd

def prompt(message, closed_question = True):
    print_color("blue", message, end = "")
    if closed_question:
        print_color("yellow", " (y/n)")
    else:
        print_color("yellow", "")
    answer = input()
    if closed_question:
        while answer != "y" and answer != "n":
            print_color("red", "Invalid answer")
            answer = input()
    return answer

def cd_gitroot():
    git_root = subprocess.check_output(["git", "rev-parse", "--show-toplevel"]).strip().decode('utf-8')
    os.chdir(git_root)

def exec_system_command(command):
    (return_code, output) = subprocess.getstatusoutput(command)
    return (return_code, output)

def deep_clean_impl(args):
    cd_gitroot()
    clean_commands = [
        "cd build && make clean",
        "find . -name \"*.o*\" -type f -delete",
        "find . -name \"*.so*\" -type f -delete",
        "find . -name \"*.a*\" -type f -delete",
        "find . -name \"*.out*\" -type f -delete",
        "find . -name \"*.log*\" -type f -delete",
        "find . -type d -name \"CmakeFiles\" -exec rm -rf {} +",
        "find . -type d -name \"build\" -exec rm -rf {} +",
        "find . -type d -name \"build.tmpCompileSrc\" -exec rm -rf {} +",
        "find . -name \"CMakeCache.txt\" -type f -delete",
        "find . -name \"cmake_install.cmake\" -type f -delete",
        "find . -name \"Makefile\" -type f -delete",
    ]
    for command in clean_commands:
        print("Executing: " + command)
        os.system(command)

def build_root(args):
    cd_gitroot()

    os.system("mkdir -p build && cd build && cmake -DWITH_PIC=on -DBUILD_SHARED_LIBS=on -DCMAKE_BUILD_TYPE=Release .. && make")

def run_tests(args):
    cd_gitroot()
    test_commands = [

    ]
    for command in test_commands:
        print("Executing: " + command)
        os.system(command)

def push(args):
    cd_gitroot()
    deep_clean_impl(args)
    print_color("yellow", "Adding all files to commit")
    exec_system_command("git add *")
    _, txt = exec_system_command("git status")
    print_color("white", txt)
    answer = prompt("Is this Ok?")
    if answer == "n":
        exec_system_command("git reset")
        return
    type = prompt("Type of the commit (e.g. \"add\", \"update\", \"del\", \"fix\", \"feat\", \"refactor\", etc.)", False)
    scope = prompt("Scope of the commit (e.g. \"core\", \"gui\", \"tests\", etc.)", False)
    issue_id = prompt("Issue id (e.g. \"123\", Enter for none)", False)
    message = prompt("Commit message", False)
    issue_id = "" if issue_id == "" else "#" + issue_id
    message = "(" + scope + ")" + " " + type + ": " + issue_id + " " + message
    os.system("git commit -m \"" + message + "\"")
    prompt("Push to remote?")
    os.system("git push")

vanilla_cpp_template = """
/*
** @file {}.cpp
** @brief Implementation of the {} class.
** @date {}.
**
*/

#include "{}.hpp"

void {}::Update(int entityID)
{{

}}

"""

vanilla_hpp_template = """
/*
** @file {}.hpp
** @brief Definition of the {} class.
** @date {}.
**
*/

#pragma once

#include \"../Component.hpp\"
#include \"metadata.hpp\"

needs(-lconfig++)
serialize class {} : public ecs::Component<{}> {{
    public:
        GENERATE_METADATA({})
        {}() = default;
        ~{}() = default;

        void Update(int entityID);
    private:
}};

"""

def fast_vanilla(args):
    name = args[0]
    cd_gitroot()
    steps = [
        "touch ecs/include/Components.Vanilla/" + name + ".hpp",
        "touch ecs/include/Components.Vanilla/" + name + ".cpp",
    ]
    for step in steps:
        os.system(step)
    cpp_file = open("ecs/include/Components.Vanilla/" + name + ".cpp", "w")
    cpp_file.write(vanilla_cpp_template.format(name, name, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), name, name))
    cpp_file.close()
    hpp_file = open("ecs/include/Components.Vanilla/" + name + ".hpp", "w")
    hpp_file.write(vanilla_hpp_template.format(name, name, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), name, name, name, name, name, name, name, name, name, name, name, name, name))
    hpp_file.close()
    print("Don't forget to add the new component to the CMakeLists.txt file") # todo make it automatic

ucpt_cpp_template = """
/*
** @file {}.cpp
** @brief Implementation of the {} class.
** @date {}.
**
*/

#include "{}.hpp"

MANAGED_RESOURCE({})

void {}::Start() {{}}

void {}::Update(int entityID)
{{

}}

"""

ucpt_hpp_template = """
/*
** @file {}.hpp
** @brief Definition of the {} class.
** @date {}.
**
*/

#pragma once

#include \"Components.Vanilla/UserComponentWrapper.hpp\"
#include \"metadata.hpp\"

serialize class {} : public AUserComponent {{
    public:
        GENERATE_METADATA({})
        {}() = default;
        ~{}() = default;

        void Start() override;
        void Update(int entityID) override;

    private:
}};

"""

def fast_ucpt(args):
    name = args[0]
    cd_gitroot()
    steps = [
        "touch ecs/include/Components.User/" + name + ".hpp",
        "touch ecs/include/Components.User/" + name + ".cpp",

    ]
    for step in steps:
        os.system(step)
    cpp_file = open("ecs/include/Components.User/" + name + ".cpp", "w")
    cpp_file.write(ucpt_cpp_template.format(name, name, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), name, name, name, name))
    cpp_file.close()
    hpp_file = open("ecs/include/Components.User/" + name + ".hpp", "w")
    hpp_file.write(ucpt_hpp_template.format(name, name, datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"), name, name, name, name, name, name, name, name, name, name, name, name, name, name))
    hpp_file.close()
    print("Don't forget to add the new component to the CMakeLists.txt file") # todo make it automatic

def setup_cmake(args):
    cd_gitroot()
    os.system("mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=SHARED -DWITH_PIC=on ..")

def fast_doc(args):
    cd_gitroot()
    setup_cmake(args)
    if len(args) == 0:
        os.system("cd build && make doc && firefox documentation/html/index.html")
    else:
        os.system("cd build && make doc && " + args[0] + " documentation/html/index.html")

def is_path_absolute(path):
    return path[0] == "/"

base_cfg_template = """
scenesSavePath="{}/.engine/scenes"
userScriptsPath="{}/ecs/include/Components.User/"
assetRoot="{}/assets/"
"""

def create_cfg(args):
    cd_gitroot()
    arg = args[0] if len(args) > 0 else ".engine/config/"
    path = arg if is_path_absolute(arg) else os.getcwd() + "/" + arg
    path += "base.cfg"
    path_without_filename = os.path.dirname(path)
    if not os.path.exists(path_without_filename):
        os.makedirs(os.path.dirname(path))
    with open(path, "w+") as f:
        f.write(base_cfg_template.format(os.getcwd(), os.getcwd(), os.getcwd()))

commands = {
    "clean" : ("performs a deep clean of the repository", lambda args: deep_clean_impl(args)),
    "build" : ("builds the project", lambda args: build_root(args)),
    "test" : ("runs all tests", lambda args: run_tests(args)),
    "push" : ("pushes the current branch", lambda args: push(args)),
    "vanilla" : ("creates a vanilla component class with the given name", lambda args: fast_vanilla(args)),
    "ucpt" : ("creates a user component class with the given name", lambda args: fast_ucpt(args)),
    "cmake" : ("runs cmake", lambda args: setup_cmake(args)),
    "doc" : ("generates the documentation and opens it using the browser given in argument, or firefox.", lambda args: fast_doc(args)),
    "setcfg" : ("creates and sets up the default configuration directory for a project", lambda args: create_cfg(args)),
}

if __name__ == "__main__":
    args = sys.argv[1:]
    if len(args) == 0:
        print("Usage: fast command <args>")
        print("Commands are: ")
        for command in commands.keys():
            print("\t-" + command + ": " + commands[command][0])
    else:
        command = args[0]
        if command in commands:
            commands[command][1](args[1:])
        else:
            print("Command " + command + " not found")
