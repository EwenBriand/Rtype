#!/usr/bin/python3

import sys
import os
import subprocess

def print_color(color, text, end = "\n"):
    colors = {
        "red" : "\033[91m",
        "green" : "\033[92m",
        "yellow" : "\033[93m",
        "blue" : "\033[94m",
        "purple" : "\033[95m",
        "cyan" : "\033[96m",
        "white" : "\033[97m",
    }
    print(colors[color] + text + "\033[0m", end = end)

def prompt(message, closed_question = True):
    print_color("blue", message, end = "")
    if closed_question:
        print_color("yellow", " (y/n)")
    else:
        print_color("yellow", "")
    answer = input()
    if closed_question:
        while answer != "y" and answer != "n":
            print_color("red", "Invalid answer")
            answer = input()
    return answer

def cd_gitroot():
    git_root = subprocess.check_output(["git", "rev-parse", "--show-toplevel"]).strip().decode('utf-8')
    os.chdir(git_root)

def exec_system_command(command):
    (return_code, output) = subprocess.getstatusoutput(command)
    return (return_code, output)

def deep_clean_impl(args):
    clean_commands = [
        "find . -name \"*.o*\" -type f -delete",
        "find . -name \"*.so*\" -type f -delete",
        "find . -name \"*.a*\" -type f -delete",
        "find . -name \"*.out*\" -type f -delete",
        "find . -name \"*.log*\" -type f -delete",
        "find . -type d -name \"CmakeFiles\" -exec rm -rf {} +",
        "find . -type d -name \"build\" -exec rm -rf {} +",
        "find . -name \"CMakeCache.txt\" -type f -delete",
        "find . -name \"cmake_install.cmake\" -type f -delete",
        "find . -name \"Makefile\" -type f -delete",
        "find . -name \"*.cmake\" -type f -delete",
    ]
    for command in clean_commands:
        print("Executing: " + command)
        os.system(command)

def build_root(args):
    cd_gitroot()
    os.system("mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=SHARED .. && make")

def run_tests(args):
    cd_gitroot()
    test_commands = [

    ]
    for command in test_commands:
        print("Executing: " + command)
        os.system(command)

def push(args):
    cd_gitroot()
    deep_clean_impl(args)
    print_color("yellow", "Adding all files to commit")
    exec_system_command("git add *")
    _, txt = exec_system_command("git status")
    print_color("white", txt)
    answer = prompt("Is this Ok?")
    if answer == "n":
        exec_system_command("git reset")
        return
    scope = prompt("Scope of the commit (e.g. \"core\", \"gui\", \"tests\", etc.)", False)
    issue_id = prompt("Issue id (e.g. \"123\", Enter for none)", False)
    message = prompt("Commit message", False)
    issue_id = "" if issue_id == "" else "#" + issue_id
    message = "(" + scope + ")" + " " + issue_id + " " + message
    os.system("git commit -m \"" + message + "\"")
    prompt("Push to remote?")
    os.system("git push")

commands = {
    "clean" : ("performs a deep clean of the repository", lambda args: deep_clean_impl(args)),
    "build" : ("builds the project", lambda args: build_root(args)),
    "test" : ("runs all tests", lambda args: run_tests(args)),
    "push" : ("pushes the current branch", lambda args: push(args)),
}

if __name__ == "__main__":
    args = sys.argv[1:]
    if len(args) == 0:
        print("Usage: fast command <args>")
        print("Commands are: ")
        for command in commands.keys():
            print("\t-" + command + ": " + commands[command][0])
    else:
        command = args[0]
        if command in commands:
            commands[command][1](args[1:])
        else:
            print("Command " + command + " not found")
